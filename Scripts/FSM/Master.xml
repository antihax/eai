<?xml version="1.0" encoding="utf-8"?>
<fsm name="Master">
	<files>
		<file name="Vehicles"/>
		<file name="Reloading"/>
	</files>
	<states default="Idle">
		<state name="Idle">
			<variables>
			</variables>
			<editor_data>
				<position x="551" y="94" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				unit.OverridePath();
			</event_entry>
			<event_exit></event_exit>
			<event_update>
                return EXIT;
            </event_update>
		</state>
		<state name="FollowFormation">
			<variables>
				<variable name="group" type="eAIGroup" />
			</variables>
			<editor_data>
				<position x="551" y="94" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
			</event_entry>
			<event_exit></event_exit>
			<event_update>
				unit.OverridePosition(group.GetFormationPosition(unit));

                return EXIT;
            </event_update>
		</state>
		<state name="TraversingWaypoints">
			<variables>
				<variable name="path" type="ref array<vector>" />
				<variable name="behaviour" type="eAIWaypointBehavior" />
				<variable name="backtracking" type="bool" />
				<variable name="index" type="int" />
			</variables>
			<editor_data>
				<position x="551" y="94" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				path = unit.GetGroup().GetWaypoints();
				if (path.Count() == 0)
				{
					path = { unit.GetPosition() };
				}
				behaviour = unit.GetGroup().GetWaypointBehaviour();
			</event_entry>
			<event_exit></event_exit>
			<event_update>
				float distance = vector.DistanceSq(unit.GetPosition(), path[index]);
				if (distance &lt; 10.0 &amp;&amp; distance &gt; 0.01)
				{
					if (backtracking) index--;
					else index++;
				}

				if (index &lt; 0) 
				{
					if (behaviour == eAIWaypointBehavior.REVERSE)
					{
						backtracking = false;
						index = 1;
					}
				}
				else if (index &gt; path.Count())
				{
					if (behaviour == eAIWaypointBehavior.REVERSE)
					{
						backtracking = true;
						index = path.Count() - 2;
					} 
					else if (behaviour == eAIWaypointBehavior.LOOP)
					{
						backtracking = false;
						index = 0;
					}
				}

				index = Math.Clamp(index, 0, path.Count());

				unit.OverridePosition(path[index]);

                return EXIT;
            </event_update>
		</state>
		<state name="Vehicles" fsm="Vehicles">
			<variables>
			</variables>
			<editor_data>
				<position x="551" y="94" />
				<size width="150" height="40" />
			</editor_data>
		</state>
		<state name="Weapon_Reloading" fsm="Reloading">
			<variables>
			</variables>
			<editor_data>
				<position x="551" y="94" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				unit.UpdateAimArbitration();
			</event_entry>
			<event_exit>
				unit.StopAimArbitration();
			</event_exit>
		</state>
		<state name="Weapon_Unjamming">
			<variables>
				<variable name="weapon" type="EntityAI" />
			</variables>
			<editor_data>
				<position x="333" y="374" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				unit.RaiseWeapon(true);

				unit.StartActionObject(eAIActionWeaponUnjam, null);
			</event_entry>
			<event_exit>
				unit.RaiseWeapon(false);
			</event_exit>
			<event_update>
				if (!unit.GetWeaponManager()) return EXIT;

				if (unit.GetWeaponManager().IsRunning()) return CONTINUE;

                return EXIT;
            </event_update>
		</state>
		<state name="Weapon_GoingToPosition">
			<variables>
				<variable name="position" type="vector" />
			</variables>
			<editor_data>
				<position x="333" y="374" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				unit.UpdateAimArbitration();
			</event_entry>
			<event_exit>
				unit.StopAimArbitration();
				unit.RaiseWeapon(false);
			</event_exit>
			<event_update>
				float dist = vector.DistanceSq(unit.GetPosition(), position);
				if (dist &lt; 4.0) unit.RaiseWeapon(true);
				else unit.RaiseWeapon(false);

				auto target = unit.GetTarget();
				if (target)
				{
					auto hands = unit.GetHumanInventory().GetEntityInHands();
					if (!hands || (!hands.IsWeapon() &amp;&amp; hands.IsMeleeWeapon())
					{
						position = target.GetPosition(unit);
					}
				}

				unit.OverridePosition(position);

				return EXIT;
            </event_update>
		</state>
		<state name="Weapon_Firing">
			<variables>
			</variables>
			<editor_data>
				<position x="333" y="374" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				unit.RaiseWeapon(true);
				unit.UpdateAimArbitration();
			</event_entry>
			<event_exit>
				unit.StopAimArbitration();
				unit.RaiseWeapon(false);
			</event_exit>
			<event_update>				
				unit.TryFireWeapon();

				return EXIT;
            </event_update>
		</state>
		<state name="Weapon_Melee">
			<variables>
				<variable name="time" type="float" />
				<variable name="target" type="EntityAI" />
			</variables>
			<editor_data>
				<position x="333" y="374" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				unit.RaiseWeapon(true);
				time = 0;
			</event_entry>
			<event_exit>
				unit.RaiseWeapon(false);
				time = 0;
			</event_exit>
			<event_update>
				if (vector.Distance(unit.GetPosition(), target.GetPosition()) &lt; 1.0)
				{
					time = 0;
					unit.Notify_Melee();
					return EXIT;
				}

				time += DeltaTime;
				unit.OverridePosition(target.GetPosition());

				if (time > 0.5)
				{
					return EXIT;
				}

				return CONTINUE;
            </event_update>
		</state>
	</states>
	<transitions>
		<transition>
			<editor_data>
				<position_source x="1" y="0.3" />
				<position_destination x="0" y="0.3" />
			</editor_data>
			<guard>
                if (unit.GetThreatToSelf() &gt; 0.4) return FAIL;

                dst.group = unit.GetGroup();
                if (!dst.group) return FAIL;

				if (dst.group.GetFormationState() != eAIGroupFormationState.IN) return FAIL;

                auto leader = dst.group.GetLeader();
                if (!leader || leader == unit) return FAIL;

                return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="Idle" />
			<to_state name="FollowFormation" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
                if (unit.GetThreatToSelf() &gt; 0.4) return FAIL;

                auto group = unit.GetGroup();
                if (!group) return FAIL;

				// we are the leader so we traverse the waypoints
                auto leader = group.GetLeader();
                if (leader &amp;&amp; leader != unit) return FAIL;

                return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="Idle" />
			<to_state name="TraversingWaypoints" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
                if (unit.GetThreatToSelf() &gt; 0.4) return SUCCESS;

				return FAIL;
            </guard>
			<event name="" />
			<from_state name="TraversingWaypoints" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
                auto group = unit.GetGroup();
				if (group &amp;&amp; group.GetFormationState() != eAIGroupFormationState.IN) return SUCCESS;
				
                if (unit.GetThreatToSelf() &gt; 0.4) return SUCCESS;

				return FAIL;
            </guard>
			<event name="" />
			<from_state name="FollowFormation" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
				if (GetGame().GetTime() - dst.sub_fsm.last_attempt_time &lt; 5000) return FAIL;

				if (!Class.CastTo(dst.sub_fsm.weapon, unit.GetItemInHands())) return FAIL;

				int mi = dst.sub_fsm.weapon.GetCurrentMuzzle();
				Magazine mag = dst.sub_fsm.weapon.GetMagazine(mi);
				if (mag &amp;&amp; mag.GetAmmoCount() &gt; 0) return FAIL;

				if (!dst.sub_fsm.weapon.IsChamberEmpty(mi)) return FAIL;

				// don't move to the state if the action manager is operating
				if (!unit.GetActionManager() || unit.GetActionManager().GetRunningAction()) return FAIL;

				return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="" />
			<to_state name="Weapon_Reloading" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
				if (!Class.CastTo(dst.weapon, unit.GetItemInHands())) return FAIL;

				if (!unit.GetWeaponManager().CanUnjam(dst.weapon)) return FAIL;

				return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="" />
			<to_state name="Weapon_Unjamming" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
                if (unit.GetThreatToSelf() &lt; 0.4) return FAIL;

				dst.position = unit.GetPosition();

                return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="TraversingWaypoints" />
			<to_state name="Weapon_GoingToPosition" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
                if (unit.GetThreatToSelf() &lt; 0.4) return FAIL;

				dst.position = unit.GetPosition();

                return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="Idle" />
			<to_state name="Weapon_GoingToPosition" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
				// we are aiming at something?
				auto target = unit.GetTarget();
				if (!target) return FAIL;

				// if they are within melee distance
				float dist = vector.Distance(unit.GetPosition(), target.GetPosition(unit));
				if (dist &lt; 1.0)
				{
					// and we have enough stamina to hit them
					if (unit.CanConsumeStamina(EStaminaConsumers.MELEE_HEAVY))
					{
						// then don't fire our weapon
						return FAIL;
					}
				}

				// we are holding a weapon
				Weapon weapon;
				if (!Class.CastTo(weapon, unit.GetItemInHands())) return FAIL;
				
				// this weapon has ammo?
				int mi = weapon.GetCurrentMuzzle();
				if (weapon.IsChamberEmpty(mi)) return FAIL;

				return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="Weapon_GoingToPosition" />
			<to_state name="Weapon_Firing" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
				// we are targetting something?
				auto target = unit.GetTarget();
				if (!target) return FAIL;

				// they are an entity?
				dst.target = target.GetEntity();
				if (!dst.target) return FAIL;

				// they are within melee range
				float dist = vector.Distance(unit.GetPosition(), dst.target.GetPosition());
				if (dist &gt; 2.0) return FAIL;

				return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="Weapon_GoingToPosition" />
			<to_state name="Weapon_Melee" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
				auto target = src.target;
				if (!target) return FAIL;

				dst.position = target.GetPosition();

				if (vector.Distance(unit.GetPosition(), dst.position) &lt; 2.0) return FAIL;

				return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="Weapon_Melee" />
			<to_state name="Weapon_GoingToPosition" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
				auto target = src.target;
				if (target) return FAIL;

				return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="Weapon_Melee" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
                if (unit.GetThreatToSelf() &lt; 0.4) return FAIL;

				dst.position = unit.GetPosition();

                return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="Weapon_Reloading" />
			<to_state name="Weapon_GoingToPosition" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
                return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="Weapon_Reloading" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
                if (unit.GetThreatToSelf() &lt; 0.4) return FAIL;

				dst.position = unit.GetPosition();

                return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="Weapon_Unjamming" />
			<to_state name="Weapon_GoingToPosition" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
                if (unit.GetThreatToSelf() &lt; 0.4) return SUCCESS;

                return FAIL;
            </guard>
			<event name="" />
			<from_state name="Weapon_Firing" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
                return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="Weapon_Unjamming" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
                if (unit.GetThreatToSelf() &gt; 0.2) return FAIL;

				return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="Weapon_GoingToPosition" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="1" y="0.3" />
				<position_destination x="0" y="0.3" />
			</editor_data>
			<guard>
                auto group = unit.GetGroup();
                if (!group) return FAIL;

				if (group.GetFormationState() != eAIGroupFormationState.IN) return FAIL;

                auto leader = group.GetLeader();
                if (!leader || leader == unit) return FAIL;

                if (!leader.IsInTransport()) return FAIL;

				Transport transport;
				Class.CastTo(transport, leader.GetParent());

				//TODO: make this event based instead and store as a variable within CarScript.
				//Prevents looping through the crew and insteads just compares a bool.
				for (int i = 1; i &lt; transport.CrewSize(); i++)
				{
					if (transport.CrewMember(i) == null)
					{
               			return SUCCESS;
					}
				}

                return FAIL;
            </guard>
			<event name="" />
			<from_state name="" />
			<to_state name="Vehicles" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
                return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="Vehicles" />
			<to_state name="Idle" />
		</transition>
	</transitions>
</fsm>