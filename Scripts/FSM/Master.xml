<?xml version="1.0" encoding="utf-8"?>
<hfsm name="Targetting">
	<subs>
		<!-- <file path="Weapon.xml"/> -->
	</subs>
	<states default="Idle">
		<state name="Idle">
			<variables>
				<variable name="time" type="float" />
			</variables>
			<editor_data>
				<position x="99" y="89" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry></event_entry>
			<event_exit></event_exit>
			<event_update>
				time += DeltaTime;
                if (time &gt; 0.25) {
					time = 0;
					return EXIT;
				}
                return CONTINUE; // We don't want to eval the transitions every frame, it takes time for some
            </event_update>
		</state>
		<state name="Follow">
			<variables>
				<variable name="time" type="float" />
				<variable name="target" type="eAITargetInformation" />
			</variables>
			<editor_data>
				<position x="551" y="94" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry></event_entry>
			<event_exit></event_exit>
			<event_update>
                time += DeltaTime;
                if (time &gt; 0.25)
				{
					target.Update(unit.GetGroup());
					time = 0;
				}

                return EXIT;
            </event_update>
		</state>
		<state name="Reload">
			<variables>
				<variable name="magazine" type="EntityAI" />
				<variable name="weapon" type="EntityAI" />
			</variables>
			<editor_data>
				<position x="333" y="374" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				unit.ReloadWeaponAI(weapon, magazine);
			</event_entry>
			<event_exit></event_exit>
			<event_update>
				if (!unit.GetWeaponManager()) return EXIT;

				if (unit.GetWeaponManager().IsRunning()) return CONTINUE;

                return EXIT;
            </event_update>
		</state>
		<state name="Combat">
			<variables>
			</variables>
			<editor_data>
				<position x="333" y="374" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				// we assume the targets have been cleaned and sorted in the transition
				unit.RaiseWeapon(true);
				unit.RefreshAimArbitration();
				unit.DelayFiring(1000, 2000);
			</event_entry>
			<event_exit>
				unit.StopAimArbitration();
				unit.RaiseWeapon(false);
			</event_exit>
			<event_update>
				if (unit.CleanThreats() &lt; 1) return EXIT;

				if (unit.ShouldFire())
					unit.FireHeldWeapon();

				return CONTINUE;
            </event_update>
		</state>
	</states>
	<transitions>
		<transition>
			<editor_data>
				<position_source x="1" y="0.3" />
				<position_destination x="0" y="0.3" />
			</editor_data>
			<guard>
                auto group = unit.GetGroup();
                if (!group) return FAIL;

                auto leader = group.GetLeader();
                if (!leader) return FAIL;

				dst.target = group.GetTargetInformation();
                if (!dst.target) return FAIL;

				if (unit.GetRequestedTransition("Rejoin"))
				{
					dst.target.AddAI(unit);
					return SUCCESS;
				}

				return FAIL;
            </guard>
			<event name="Rejoin" />
			<from_state name="Idle" />
			<to_state name="Follow" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
                auto group = unit.GetGroup();
                if (!group) return FAIL;

                auto leader = group.GetLeader();
                if (!leader) return SUCCESS;

				auto target = group.GetTargetInformation();
                if (!target) return SUCCESS;

				if (unit.GetRequestedTransition("Stop"))
				{
					target.RemoveAI(unit);
					return SUCCESS;
				}

				return FAIL;
            </guard>
			<event name="Stop" />
			<from_state name="Follow" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
				Weapon weapon_in_hands;
				if (!Class.CastTo(weapon_in_hands, unit.GetItemInHands())) return FAIL;

				int mi = weapon_in_hands.GetCurrentMuzzle();
				Magazine mag = weapon_in_hands.GetMagazine(mi);
				if (mag &amp;&amp; mag.GetAmmoCount() &gt; 0) return FAIL;

				dst.magazine = unit.GetMagazineToReload(weapon_in_hands);
				dst.weapon = weapon_in_hands;
				if (!dst.magazine || !dst.weapon) return FAIL;

				// don't move to the state if the action manager can't be initiated.
				if (!unit.GetActionManager() || unit.GetActionManager().GetRunningAction()) return FAIL;
				
				return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="Follow" />
			<to_state name="Reload" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
				Weapon weapon_in_hands;
				if (!Class.CastTo(weapon_in_hands, unit.GetItemInHands())) return FAIL;

				int mi = weapon_in_hands.GetCurrentMuzzle();
				Magazine mag = weapon_in_hands.GetMagazine(mi);
				if (mag &amp;&amp; mag.GetAmmoCount() &gt; 0) return FAIL;

				dst.magazine = unit.GetMagazineToReload(weapon_in_hands);
				dst.weapon = weapon_in_hands;
				if (!dst.magazine || !dst.weapon) return FAIL;

				// don't move to the state if the action manager can't be initiated.
				if (!unit.GetActionManager() || unit.GetActionManager().GetRunningAction()) return FAIL;
				
				return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="Idle" />
			<to_state name="Reload" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
                auto group = unit.GetGroup();
                if (!group) return FAIL;

                auto leader = group.GetLeader();
                if (!leader) return FAIL;

				auto target = group.GetTargetInformation();
                if (!target) return FAIL;

				if (m_FSM.GetLastState() == "Follow")
					return SUCCESS;

                return FAIL;
            </guard>
			<event name="" />
			<from_state name="Reload" />
			<to_state name="Follow" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
				// previous state is assumed to have succeeded first, if it failed, then we must always assume this succeeds to perform a reset
                return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="Reload" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
				if (unit.CleanThreats() &gt; 0) return SUCCESS;
                return FAIL;
            </guard>
			<event name="" />
			<from_state name="Idle" />
			<to_state name="Combat" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
				if (unit.CleanThreats() &gt; 0) {
					auto group = unit.GetGroup();
	                if (group) {
						auto target = group.GetTargetInformation();
		                if (target) {
							target.RemoveAI(unit);
							return SUCCESS;
						}
					}
				}
                return FAIL;
            </guard>
			<event name="" />
			<from_state name="Follow" />
			<to_state name="Combat" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
				auto group = unit.GetGroup();
                if (!group) return FAIL;

                auto leader = group.GetLeader();
                if (!leader) return FAIL;

				auto target = group.GetTargetInformation();
                if (!target) return FAIL;

				if (m_FSM.GetLastState() == "Follow") {
					target.AddAI(unit);
					return SUCCESS;
				}
	
                return FAIL;
            </guard>
			<event name="" />
			<from_state name="Combat" />
			<to_state name="Follow" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
				return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="Combat" />
			<to_state name="Idle" />
		</transition>
	</transitions>
</hfsm>